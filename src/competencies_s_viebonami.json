[
    {
        "Группа компетенций": "Технические навыки",
        "Компетенция": "Python",
        "А0": "Базовый синтаксис: \nПеременные, условия, циклы - уверенное использование базовых конструкций\nПростые функции - умеет разбивать код на логические блоки\nСтруктуры данных: \nList/dict/set - базовые операции\nОшибки: \nTry/except - обработка простых исключений",
        "А1": "Базовое ООП: \nКлассы и наследование - создает простые иерархии\nПродвинутые возможности:\nРабота с исключениями (try/except/finally)\nСоздание и применение декораторов\nГенераторы и итераторы\nКонтекстные менеджеры (with)\nРабота с данными:\nРегулярные выражения (re)\nОбработка CSV и JSON\nВзаимодействие с API ",
        "А2": "Продвинутое ООП: \nНаследование, полиморфизм, инкапсуляция\nСОЛИД\nСистемное программирование:\nРабота с потоками, процессами (subprocess, multiprocessing, threads)\nПродвинутые архитектурные решения:\nПаттерны проектирования (Factory, Singleton, Observer)\nСоздание CLI-утилит (argparse, click)",
        "А3": "Интеграционные решения:\nРабота с message brokers \nТехническое лидерство в QA:\nРефакторинг и поддержка legacy-кода\nПроектирование архитектуры \nОптимизация производительности\nCode review и менторинг команды",
        "Доп": "Асинхронное программирование\nИнтеграция с другими языками\nРаспределенные системы\nРазработка пакетов и их публикация в PyPI" 
    },
    {
        "Группа компетенций": "",
        "Компетенция": "PyTest",
        "А0": "Базовое понимание PyTest.\nУмение запускать готовые тесты.\nЗнание основных команд для выполнения тестов.",
        "А1": "Написание простых тестов с ассертами. (достаточно понимание ассерта и как это работает в pytest. Простое сравнение)\nИспользование фикстур и параметризации.\nРабота с маркировкой и группировкой тестов.",
        "А2": "Создание сложных тестовых сценариев. (Тест который не просто сравнивает результаты, перед этим проводит манипуляции, готовит данные, ждет ответа и иное)\nИнтеграция с CI/CD и сторонними инструментами.\nИспользование плагинов (pytest-xdist и т.д.).",
        "А3": "Оптимизация и масштабирование тестов.\nГлубокое понимание архитектуры PyTest:\nМеханизм фикстур (Fixture System)\nПлагинная система\nХуки (Hooks)\nКак PyTest обрабатывает тесты\nСбор тестов\nЗапуск тестов\nФормирование отчета",
        "Доп": "Разработка кастомных плагинов. (Логика которая пишется в conftest можно посчитать плагином если она затрагивает логику работу pytest; в таком случае надо знать теорию как сделать плагин отдельным пакетом)" 
    },
    {
        "Группа компетенций": "",
        "Компетенция": "requests",
        "А0": "Нет опыта конктерно с request. Есть базовые знания по запросам (GET, POST и тд, status code и остальное сопутсвующее)",
        "А1": "Базовые запросы\nGET/POST - выполняет простые HTTP-запросы\nПараметры - передает query params и form data\nОтветы\nStatus codes - проверяет коды ответов\nJSON - парсит простые JSON-ответы",
        "А2": "Работа с авторизацией\nheaders (правильные хедеры что значат и тд)\nОбработка ошибок\nЛогирование\nСамостоятельное решение проблемы не правильного запроса (использование swagger, postman и иных инструментов в качестве помощи",
        "А3": "Использование requests в UI тестах для оптимизации\nИcпользование в CI/CD",
        "Доп": "Валидация JSON-схем (jsonschema, pydantic).\nИспользование сессий (requests.Session()).\nMock API для тестов (responses, pytest-mock или иное).\nОптимизация запросов (кеширование, retry-логика).\nРабота с асинхронными запросами (aiohttp, httpx)." 
    },
    {
        "Группа компетенций": "",
        "Компетенция": "Selenium",
        "А0": "Слышал про selenium, знает в теории сам не трогал",
        "А1": "Локаторы\nCSS/XPath - сложные селекторы\nRelative locators - near(), above()\nБазовые операции на странице\nНавигация - get(), back(), forward()\nПоиск элементов - find_element(s)by*\nПростые действия - click(), send_keys()\nОжидания\ntime.sleep() базовые паузы \nWebDriverWait - explicit waits\nExpected conditions",
        "А2": "Архитектура\nPage Object Model\nБраузерные настройки\nChromeOptions/FirefoxProfile\nПрокси и сертификаты\nРабота с iframe и новыми окнами\nПродвинутые операции на странице (что-то специфичное, или некая вариация из базовых, например, цикл нажатий и тд)\nРасширения\nActionChains - сложные взаимодействия\nJavaScriptExecutor",
        "А3": "Оптимизация\nПараллельный запуск (Selenium Grid или иное) (Знать как минимум в теории)",
        "Доп": "Решение сложных проблем (тенистые DOM, WebComponents)" 
    },
    {
        "Группа компетенций": "",
        "Компетенция": "Playwright",
        "А0": "Навык отсутствует",
        "А1": "База Playwright\nЗапуск браузера (Chromium, Firefox, WebKit)\nЛокаторы: page.locator(), текстовые/ролевые селекторы\nБазовые операции на странице (аналоги в selenium)\nБазовые ожидания",
        "А2": "Архитектура\nPage Object Model\nРабота с локаторами (оптимизация, доп логика иные улучшения)\nПродвинутые возможности\nРабота с iframe и popup-окнами\nКастомные ожидания (expect(locator).to_have_*)\nРасширения\nИспользование цепочек действий, взаимодействие с JS",
        "А3": "Оптимизация\nПараллельный запуск (Selenium Grid для playwright или иное) (Знать как минимум в теории)\nОптимизация скорости выполнения тестов",
        "Доп": "Кастомизация\nWebSockets " 
    },
    {
        "Группа компетенций": "",
        "Компетенция": "Appium",
        "А0": "Навык отсутствует",
        "А1": "Базовые операции\nПодключение к устройству/эмулятору\nПоиск элементов (ID, XPath, Accessibility ID)\nПростые действия: tap(), send_keys()\nНастройка\nDesired Capabilities для Android/iOS\nЗапуск тестов через CLI",
        "А2": "Продвинутые техники\nTouchAction, MultiTouch, Scroll, Swipe и остальное  \nРабота с гибридными и нативными приложениями\nКастомные ожидания (WebDriverWait)\nИнтеграция\nПодключение к удаленным устройствам",
        "А3": "Оптимизация\nПараллельный запуск на нескольких устройствах\nРешение проблем нестабильных тестов\nЭкспертиза\nОтладка сложных проблем (WebView, HID)",
        "Доп": "Работа с специфичными возможностями устройств (сканер отпечатков, камера и остальное)\nКастомизация Appium\nOpenCV (компьютер вижн в теории/на практике для использования тестирования дизайна или иного специфичного)" 
    },
    {
        "Группа компетенций": "",
        "Компетенция": "Android эмуляция",
        "А0": "Запуск эмулятора через Android Studio",
        "А1": "Работа с adb\nУстановка APK (adb install)\nЛогирование (adb logcat)\nЗапуск эмулятора из под командной строки",
        "А2": "Скриптинг запуска/остановки эмулятора\nПродвинутая работа с adb (настройка эмулятора, управление эмуляторм и тд)\nСоздание кастомных AVD-образов\nЭмуляция разных Android версий/разрешений\nНастройка аппаратных параметров (CPU, RAM)",
        "А3": "Интеграция с CI/CD (Headless-режим)\nКастомные образы для тестовых сценариев\nРешение проблем производительности\nРабота с snapshots для ускорения тестов",
        "Доп": "Работа с андроид в рамах контейнеризации (docker). Особенности виртуализации, параметров и остального. \nРабота внутри кластера" 
    },
    {
        "Группа компетенций": "",
        "Компетенция": "Docker",
        "А0": "Запуск/остановка контейнеров (docker run/stop)\nПросмотр логов (docker logs)\nПонимание образов vs контейнеров",
        "А1": "Создание простых Dockerfile.\nЗапуск тестов в докер контейнерах\nМонтирование томов для отчетов\nИспользование docker-compose для связки сервисов",
        "А2": "Оптимизация для автотестов\nСоздание кастомных образов под проекты\nРешение проблем сетевого взаимодействия\nИнтеграция с CI/CD (кеширование слоев)\nПродвинутые взаимодействия с контейнерами (exec, commit и т.д)",
        "А3": "Оптимизация размеров образов для тестов",
        "Доп": "" 
    },
    {
        "Группа компетенций": "",
        "Компетенция": "Kubernetes",
        "А0": "Понимание Pod/Deployment/Service\nПросмотр логов (kubectl logs, dashboard)",
        "А1": "Работа с тестовой инфраструктурой\nЗапуск тестов в существующем кластере \nУстановка и настройка Minikube.",
        "А2": "Работа с Helm для управления пакетами.\nИспользование kubectl для управления кластером.\nНастройка конфигураций YAML.",
        "А3": "Оптимизация тестовых сред\nРешение проблем сетевой политики\nИнтеграция с CI/CD \nРазвертывание Automation services (средства для автоматизации, например, Selenium Grid)\nНастройка ConfigMaps/Secrets для тестов",
        "Доп": "" 
    },
    {
        "Группа компетенций": "",
        "Компетенция": "locust",
        "А0": "Теоретические знания по нагрузочному тестированию (минимальное знание зачем и что это)",
        "А1": "Установка и настройка Locust\nНаписание простых тестов (HttpUser) (taskset, sequentionaltaskset, веса)\nЗапуск тестов с UI/командной строки\nАнализ базовых метрик (RPS, latency)",
        "А2": "Продвинутое тестирование\nПараметризация тестовых данных\nРаспределенный запуск (worker nodes)\nКастомные обработчики событий\nРедактирование клиента (другие протоколы (grpc и т.д.), авторизация, waits и иная специфичная компетенция для нормальной работы запросов)",
        "А3": "Работа с мониторингом (Prometheus/Grafana)\nАнализ bottleneck'ов системы\nРабота с документацией (подготовка методологии и иных сопутствующих документов)",
        "Доп": "" 
    },
    {
        "Группа компетенций": "",
        "Компетенция": "Git",
        "А0": "Клонирование репозиториев\nСоздание коммитов\nОтправка изменений (push)\nОбновление кода (pull)",
        "А1": "Работа с ветками\nСоздание/переключение веток\nСоздание merge requests",
        "А2": "Работа с ветками\nРазрешение конфликтов слияния\nСледование флоу работы\nНазвание веток\nАдекватные коммиты (Название, описание. размер)\nПравильное оформление  merge requests",
        "А3": "Разрешение сложных конфликтов.\nCode review ",
        "Доп": "Ребазирование веток\nПоиск по истории (git bisect)\nИнтерактивное добавление изменений\nВременное сохранение изменений (stash)\nИстория изменений\nАнализ логов (git log)\nОтмена изменений (reset/revert)" 
    },
    {
        "Группа компетенций": "",
        "Компетенция": "Gitlab CI",
        "А0": "Навык отсутствует",
        "А1": "Понимание pipeline/stages/jobs\nЗапуск готовых пайплайнов\nПросмотр результатов выполнения",
        "А2": "Создание .gitlab-ci.yml для автотестов\nАртефакты и кеширование отчетов\nЗависимости между jobs (needs/dependencies)\nШаблоны (includes) для переиспользования кода",
        "А3": "Оптимизация времени выполнения\nДинамические окружения (зависимость тестов от стейджа)\nБезопасность (переменные, токены)",
        "Доп": "" 
    },
    {
        "Группа компетенций": "",
        "Компетенция": "Postman",
        "А0": "Создание и отправка запросов\nПроверка статус-кодов",
        "А1": "Понимание работы с авторизацией\nПонимание requests body что и когда\nРабота с переменными окружения",
        "А2": "Написание сложных тестовых скриптов (pre-request, post-request)\nПараметризация тестов",
        "А3": "Создание и использование mock-сервисов",
        "Доп": "" 
    },
    {
        "Группа компетенций": "",
        "Компетенция": "Общие технические знания (протоколы, паттерны, архитектурные стили и тд)",
        "А0": "Базовые структуры данных \n(JSON/XML)",
        "А1": "Понимание HTTP/HTTPS \nВиды авторизации (JWT, OAuth 2.0 и тд)\nREST API\nОсновы микросервисной архитектуры\nПринципы клиент-серверного взаимодействия\nРеляционные базы данных",
        "А2": "Архитектурные решения\nНереляционные базы данных\nАлгоритмы\nПаттерны программирования (Singleton, Factory и т.д.)\nMessage Brokers (Kafka/RabbitMQ)\nМетодология разработки ПО",
        "А3": "Кеширование (например Redis и т.д.)\nОсновы DevOps (ну тут просто как зачем что используют, примерно понимать как на практике)\nОсновы сетевой безопасности",
        "Доп": "TCP/IP\nHTTP/2 и HTTP/3\nSOAP\nWebSocket/gRPC протоколы\nGraphQL\nNginx, envoy или иное подобное\nКакой-нибудь фреймворк (под питон Djanga, например, не надо быть гуру. Знать как работает, для чего)" 
    },
    {
        "Группа компетенций": "",
        "Компетенция": "Паттерны автотестирования",
        "А0": "Линейные скрипты\nПростые модульные тесты\nЭлементарные проверки (assert)",
        "А1": "Page Object Model (POM)\nЛокаторные стратегии\nСтатические: id, class, xpath (например, //button[@id=\"\"submit\"\"]).\nДинамические: Генерация локаторов во время выполнения (например, через text() или contains).\nData-Driven Testing (Отделение тестовых данных от логики теста (например, использование CSV/JSON/Excel).\nПараметризованные тесты",
        "А2": "Screenplay Pattern (Паттерн, моделирующий взаимодействие пользователя с системой через \"\"акторов\"\" (Actors), \"\"способности\"\" (Abilities) и \"\"задачи\"\" (Tasks).) под BDD\nComposite Pattern (Создание сложных действий из простых (например, CompositeAction в Selenium). (типа так actions.tap(element1).press(element2).release().perform())\nChain of Responsibility (Паттерн, где запрос обрабатывается цепочкой обработчиков (например, для валидации данных).\nФасад для сложных систем (Упрощение работы с комплексными API/библиотеками через единый интерфейс.)",
        "А3": "Domain-Specific Language (DSL) (Создание специализированного языка для тестов (например, для API-тестирования).\n Развернуть исходный код\nSelf-Healing тесты (Тесты, которые автоматически адаптируются к изменениям в UI (например, через ML или резервные локаторы).\nAdaptive Test Framework (Фреймворк, который динамически подстраивается под окружение (например, выбирает локаторы для iOS/Android).)\nEvent-Driven тестирование (Тестирование систем, реагирующих на события (например, WebSockets, Kafka).)",
        "Доп": "" 
    },
    {
        "Группа компетенций": "",
        "Компетенция": "Jira Confluence (Иные системы)",
        "А0": "Создание/просмотр задач\nПоиск информации \nКомментирование и обновление статусов",
        "А1": "Написание и организация документации \nИспользование запросов для поиска задач\nРабота с бордой\nТочное следование принятому флоу работы команды (отражать текущий статус задач, вовремя обновлять статус и тд)",
        "А2": "Интеграция внутри системы управления проектами\nШаблоны \nНастройка дашбордов",
        "А3": "Менеджмент пространства\nКастомизация под нужды команды\nИнтеграция с внешними системами",
        "Доп": "" 
    },
    {
        "Группа компетенций": "",
        "Компетенция": "Артефакты тестирования (на автотесты)",
        "А0": "Консольные логи\nСкриншоты падений\nПростые текстовые результаты",
        "А1": "HTML-отчеты (pytest-html) или иной инструмент построение простого отчета\nВидеозаписи выполнения (Selenoid) (Не практичная штука с точки зрения ресурсов но знать возможность нужно)\nЛоги с шагами (Allure)\nИстория запусков",
        "А2": "Кастомизация отчётов (доп. данные, графики)\nАвтоматическая загрузка артефактов в хранилище",
        "А3": "Кастомные системы отчетности\nPredictive analytics на основе артефактов\nАвтоматизированные RCA-отчеты\nОптимизация хранения артефактов\nИнтеграция с Test Management\nМониторинг (Grafana и т.д.)",
        "Доп": "" 
    },
    {
        "Группа компетенций": "",
        "Компетенция": "Теория тестирования (Общие знания)",
        "А0": "Понимание роли тестирования\nВиды тестирования (smoke, regression)\nПринципы составления тест-кейсов\nБаг-репорты (шаги воспроизведения)",
        "А1": "Техники тест-дизайна (эквивалентные классы, граничные значения)\nМетрики тестирования (coverage)\nПринципы составления чек-листов",
        "А2": "Комбинаторные техники (pairwise)\nRisk-based тестирование\nОптимизация тест-кейсов",
        "А3": "Модели зрелости процессов (TMMi)\nОптимизация QA-процессов \nАвтоматизация рутинных задач\nУлучшение процессов тестирования\nИспользование метрик и аналитики\nОптимизация тестовых данных",
        "Доп": "" 
    },
    {
        "Группа компетенций": "",
        "Компетенция": "Диагностика, мониторинг, работа с логами и шинами сообщений",
        "А0": "Чтение и фильтрация логов (grep, less)\nПонимание уровней логирования (INFO, ERROR, DEBUG)\nПоиск ошибок в stdout/stderr автотестов",
        "А1": "Базовый Prometheus + Grafana (метрики тестов) (Зайти посмотреть и понять)\nАнализ логов в ELK Stack (Kibana)\nРабота с шинами (Kafka/RabbitMQ - потребление сообщений)",
        "А2": "Распределенная трассировка (Jaeger/Zipkin)\nПродвинутый Prometheus + Grafana (метрики тестов) (работа с query, дашбордами и тд)",
        "А3": "Мониторил состояние здоровья микросервиса: состояние соединения с БД, АБС, RabbitMQ\nЧитал StackTrace, для поиска кода, в котором возникла ошибка\nВыявлял ошибки и неоптимальные запросы при чтении спанов Jaeger",
        "Доп": "" 
    },
    {
        "Группа компетенций": "",
        "Компетенция": "Базы данных (SQL)",
        "А0": "SELECT, INSERT, UPDATE, DELETE\nПростые WHERE-условия\nСортировка (ORDER BY)\nЛимиты (LIMIT)",
        "А1": "JOIN (INNER, LEFT, RIGHT)\nГруппировка (GROUP BY, HAVING)\nПодзапросы\nАгрегатные функции (COUNT, SUM, AVG)",
        "А2": "Знание ORM систем (SQLAlchemy, Django ORM и другие)",
        "А3": "SQL для NoSQL-гибридов (PostgreSQL + JSON)\nАвтоматизация проверок целостности данных",
        "Доп": "" 
    },
    {
        "Группа компетенций": "Планирование и организация",
        "Компетенция": "Оценка трудозатрат и рисков",
        "А0": "Навык отсутствует",
        "А1": "Определял риски, и их влияние на проект.",
        "А2": "Оценивал свои и чужие трудозатраты на выполнение задач и укладывался в ~60% случаях\nОпределял и оценивал риски по организации или изменении проекта, на основании которых обосновывал превышение оценок, предупреждал о недооценке в начале работы.",
        "А3": "Оценивал свои и чужие трудозатраты на выполнение задач и укладывался в 80%+ случаях\nИзменял подходы выполняемой работы с учётом рисков и/или срочности задач для достижения результата.\nСоставлял карту рисков, принимал меры предотвращения рисков, минимизировал влияние сыгравших рисков.",
        "Доп": "" 
    },
    {
        "Группа компетенций": "",
        "Компетенция": "Наставничество и обучение",
        "А0": "Навык отсутствует",
        "А1": "Составил обучающую документацию в Confluence\nОбучал стажера/новичка\nОбучал коллег методам или/и программам тестирования (или другим фичам для улучшения и оптимизации тестирования)",
        "А2": "Обучал 2+ новичков/стажеров",
        "А3": "Привнес новые методологии/способы тестирования (ранее не использовавшимся в отделе тестирования ПО) и обучил этому своих коллег\nОбучал 3+ новичков/стажеров",
        "Доп": "Проводил обучающий митап/принимал участие в AEB Speech" 
    },
    {
        "Группа компетенций": "Деятельность банка",
        "Компетенция": "Знание продуктов банка и Локальные ресурсы АЭБ (портал, справочники, систему документооборота итд.)",
        "А0": "Имеет общее представление о продуктах банка",
        "А1": "Обращался с вопросами по другим продуктам к другим командам.\nРаботал с внутренними ресурсами банка",
        "А2": "Работал с несколькими продуктами по смежным проектам. \nОриентировался в поиске информации по проекту при работе с внутренними ресурсами банка\nСоставлял и публиковал документацию во внутренних ресурсах банка",
        "А3": "Работал в 4+ проектах банка",
        "Доп": "" 
    }
]